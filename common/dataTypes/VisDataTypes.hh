/* automatically generated by xdrgen from VisDataTypes.def
 * xdrgen cvs version: $Revision: 1.7 $ $Date: 2009/01/12 15:54:59 $
 * VisDataTypes.def last modified: Fri Apr 23 14:03:50 2010
 */

#ifndef INCVisDataTypes_hh
#define INCVisDataTypes_hh



#include <stdint.h>
namespace vis

{


struct Pos2D {
  double x;
  double y;
#define Pos2D_IPC_FORMAT "{double,double}"
  static const char *getIPCFormat(void) {
    return Pos2D_IPC_FORMAT;
  }
};

struct Pos2DT {
  double x;
  double y;
  double t;
#define Pos2DT_IPC_FORMAT "{double,double,double}"
  static const char *getIPCFormat(void) {
    return Pos2DT_IPC_FORMAT;
  }
};

struct Rot2D {
  double angle;
#define Rot2D_IPC_FORMAT "{double}"
  static const char *getIPCFormat(void) {
    return Rot2D_IPC_FORMAT;
  }
};

struct Pos3D {
  double x;
  double y;
  double z;
#define Pos3D_IPC_FORMAT "{double,double,double}"
  static const char *getIPCFormat(void) {
    return Pos3D_IPC_FORMAT;
  }
};

struct Pos3DT {
  double x;
  double y;
  double z;
  double t;
#define Pos3DT_IPC_FORMAT "{double,double,double,double}"
  static const char *getIPCFormat(void) {
    return Pos3DT_IPC_FORMAT;
  }
};

struct Rot3D {
  double roll;
  double pitch;
  double yaw;
#define Rot3D_IPC_FORMAT "{double,double,double}"
  static const char *getIPCFormat(void) {
    return Rot3D_IPC_FORMAT;
  }
};

struct Rot3DT {
  double roll;
  double pitch;
  double yaw;
  double t;
#define Rot3DT_IPC_FORMAT "{double,double,double,double}"
  static const char *getIPCFormat(void) {
    return Rot3DT_IPC_FORMAT;
  }
};

struct Pose3D {
  Pos3D pos;
  Rot3D rot;
#define Pose3D_IPC_FORMAT "{" Pos3D_IPC_FORMAT "," Rot3D_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return Pose3D_IPC_FORMAT;
  }
};

struct Pose3DT {
  Pos3D pos;
  Rot3D rot;
  double t;
#define Pose3DT_IPC_FORMAT "{" Pos3D_IPC_FORMAT "," Rot3D_IPC_FORMAT ",double}"
  static const char *getIPCFormat(void) {
    return Pose3DT_IPC_FORMAT;
  }
};

struct Pose2D {
  Pos2D pos;
  Rot2D rot;
#define Pose2D_IPC_FORMAT "{" Pos2D_IPC_FORMAT "," Rot2D_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return Pose2D_IPC_FORMAT;
  }
};

struct Pose2DT {
  Pos2D pos;
  Rot2D rot;
  double t;
#define Pose2DT_IPC_FORMAT "{" Pos2D_IPC_FORMAT "," Rot2D_IPC_FORMAT ",double}"
  static const char *getIPCFormat(void) {
    return Pose2DT_IPC_FORMAT;
  }
};

struct ColorByteRGB {
  char r;
  char g;
  char b;
#define ColorByteRGB_IPC_FORMAT "{char,char,char}"
  static const char *getIPCFormat(void) {
    return ColorByteRGB_IPC_FORMAT;
  }
};

struct ColorDoubleRGB {
  double r;
  double g;
  double b;
#define ColorDoubleRGB_IPC_FORMAT "{double,double,double}"
  static const char *getIPCFormat(void) {
    return ColorDoubleRGB_IPC_FORMAT;
  }
};

struct ColorByteRGBA {
  char r;
  char g;
  char b;
  char a;
#define ColorByteRGBA_IPC_FORMAT "{char,char,char,char}"
  static const char *getIPCFormat(void) {
    return ColorByteRGBA_IPC_FORMAT;
  }
};

struct ColorDoubleRGBA {
  double r;
  double g;
  double b;
  double a;
#define ColorDoubleRGBA_IPC_FORMAT "{double,double,double,double}"
  static const char *getIPCFormat(void) {
    return ColorDoubleRGBA_IPC_FORMAT;
  }
};

struct Pos2DColorByteRGBA {
  Pos2D pos;
  ColorByteRGBA color;
#define Pos2DColorByteRGBA_IPC_FORMAT "{" Pos2D_IPC_FORMAT "," ColorByteRGBA_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return Pos2DColorByteRGBA_IPC_FORMAT;
  }
};

struct Pos2DColorDoubleRGBA {
  Pos2D pos;
  ColorDoubleRGBA color;
#define Pos2DColorDoubleRGBA_IPC_FORMAT "{" Pos2D_IPC_FORMAT "," ColorDoubleRGBA_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return Pos2DColorDoubleRGBA_IPC_FORMAT;
  }
};

struct Pos3DColorByteRGBA {
  Pos3D pos;
  ColorByteRGBA color;
#define Pos3DColorByteRGBA_IPC_FORMAT "{" Pos3D_IPC_FORMAT "," ColorByteRGBA_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return Pos3DColorByteRGBA_IPC_FORMAT;
  }
};

struct Pos3DColorDoubleRGBA {
  Pos3D pos;
  ColorDoubleRGBA color;
#define Pos3DColorDoubleRGBA_IPC_FORMAT "{" Pos3D_IPC_FORMAT "," ColorDoubleRGBA_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return Pos3DColorDoubleRGBA_IPC_FORMAT;
  }
};

struct TrajPos2D {
  unsigned int numPoints;
  Pos2D *points;
#define TrajPos2D_IPC_FORMAT "{uint,<" Pos2D_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return TrajPos2D_IPC_FORMAT;
  }
};

struct TrajPose2D {
  unsigned int numPoints;
  Pose2D *points;
#define TrajPose2D_IPC_FORMAT "{uint,<" Pose2D_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return TrajPose2D_IPC_FORMAT;
  }
};

struct TrajPos3D {
  unsigned int numPoints;
  Pos3D *points;
#define TrajPos3D_IPC_FORMAT "{uint,<" Pos3D_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return TrajPos3D_IPC_FORMAT;
  }
};

struct TrajPose3D {
  unsigned int numPoints;
  Pose3D *points;
#define TrajPose3D_IPC_FORMAT "{uint,<" Pose3D_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return TrajPose3D_IPC_FORMAT;
  }
};

struct TrajPos2DColorByteRGBA {
  unsigned int numPoints;
  Pos2DColorByteRGBA *points;
#define TrajPos2DColorByteRGBA_IPC_FORMAT "{uint,<" Pos2DColorByteRGBA_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return TrajPos2DColorByteRGBA_IPC_FORMAT;
  }
};

struct TrajPos2DColorDoubleRGBA {
  int numPoints;
  Pos2DColorDoubleRGBA *points;
#define TrajPos2DColorDoubleRGBA_IPC_FORMAT "{int,<" Pos2DColorDoubleRGBA_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return TrajPos2DColorDoubleRGBA_IPC_FORMAT;
  }
};

struct TrajPos3DColorByteRGBA {
  unsigned int numPoints;
  Pos3DColorByteRGBA *points;
#define TrajPos3DColorByteRGBA_IPC_FORMAT "{uint,<" Pos3DColorByteRGBA_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return TrajPos3DColorByteRGBA_IPC_FORMAT;
  }
};

struct TrajPos3DColorDoubleRGBA {
  int numPoints;
  Pos3DColorDoubleRGBA *points;
#define TrajPos3DColorDoubleRGBA_IPC_FORMAT "{int,<" Pos3DColorDoubleRGBA_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return TrajPos3DColorDoubleRGBA_IPC_FORMAT;
  }
};

struct PointCloud2D {
  int numPoints;
  Pos2D *points;
#define PointCloud2D_IPC_FORMAT "{int,<" Pos2D_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return PointCloud2D_IPC_FORMAT;
  }
};

struct PointCloud3D {
  int numPoints;
  Pos3D *points;
#define PointCloud3D_IPC_FORMAT "{int,<" Pos3D_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return PointCloud3D_IPC_FORMAT;
  }
};

struct PointCloud2DColorByteRGBA {
  int numPoints;
  Pos2DColorByteRGBA *points;
#define PointCloud2DColorByteRGBA_IPC_FORMAT "{int,<" Pos2DColorByteRGBA_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return PointCloud2DColorByteRGBA_IPC_FORMAT;
  }
};

struct PointCloud2DColorDoubleRGBA {
  int numPoints;
  Pos2DColorDoubleRGBA *points;
#define PointCloud2DColorDoubleRGBA_IPC_FORMAT "{int,<" Pos2DColorDoubleRGBA_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return PointCloud2DColorDoubleRGBA_IPC_FORMAT;
  }
};

struct PointCloud3DColorByteRGBA {
  int numPoints;
  Pos3DColorByteRGBA *points;
#define PointCloud3DColorByteRGBA_IPC_FORMAT "{int,<" Pos3DColorByteRGBA_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return PointCloud3DColorByteRGBA_IPC_FORMAT;
  }
};

struct PointCloud3DColorDoubleRGBA {
  int numPoints;
  Pos3DColorDoubleRGBA *points;
#define PointCloud3DColorDoubleRGBA_IPC_FORMAT "{int,<" Pos3DColorDoubleRGBA_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return PointCloud3DColorDoubleRGBA_IPC_FORMAT;
  }
};

struct Matrix3x3Double {
  double data[3][3];
#define Matrix3x3Double_IPC_FORMAT "{[double:3,3]}"
  static const char *getIPCFormat(void) {
    return Matrix3x3Double_IPC_FORMAT;
  }
};

struct Cov3x3 {
  double data[3][3];
#define Cov3x3_IPC_FORMAT "{[double:3,3]}"
  static const char *getIPCFormat(void) {
    return Cov3x3_IPC_FORMAT;
  }
};

struct Cov2x2 {
  double data[2][2];
#define Cov2x2_IPC_FORMAT "{[double:2,2]}"
  static const char *getIPCFormat(void) {
    return Cov2x2_IPC_FORMAT;
  }
};

struct Text {
  char *value;
#define Text_IPC_FORMAT "{string}"
  static const char *getIPCFormat(void) {
    return Text_IPC_FORMAT;
  }
};

struct PluginInfo {
  char *property;
  char *value;
#define PluginInfo_IPC_FORMAT "{string,string}"
  static const char *getIPCFormat(void) {
    return PluginInfo_IPC_FORMAT;
  }
};

struct LoadPluginInfo {
  unsigned int num;
  PluginInfo *info;
#define LoadPluginInfo_IPC_FORMAT "{uint,<" PluginInfo_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return LoadPluginInfo_IPC_FORMAT;
  }
};

struct LoadPluginResponse {
  unsigned int index;
  char *id;
#define LoadPluginResponse_IPC_FORMAT "{uint,string}"
  static const char *getIPCFormat(void) {
    return LoadPluginResponse_IPC_FORMAT;
  }
};

struct ListPluginFilter {
  char *regexp;
#define ListPluginFilter_IPC_FORMAT "{string}"
  static const char *getIPCFormat(void) {
    return ListPluginFilter_IPC_FORMAT;
  }
};

struct ListPluginResponse {
  unsigned int num;
  char **name;
#define ListPluginResponse_IPC_FORMAT "{uint,<string:1>}"
  static const char *getIPCFormat(void) {
    return ListPluginResponse_IPC_FORMAT;
  }
};

struct UnloadPlugin {
  char *name;
#define UnloadPlugin_IPC_FORMAT "{string}"
  static const char *getIPCFormat(void) {
    return UnloadPlugin_IPC_FORMAT;
  }
};


struct UInt16Array1D
{
  unsigned int size;
  uint16_t * data;

  UInt16Array1D() : size(0), data(0) {}
#define UInt16Array1D_IPC_FORMAT "{uint,<ushort:1>}"
  static const char *getIPCFormat(void) {
    return UInt16Array1D_IPC_FORMAT;
  }
};


struct UInt32Array1D {
  unsigned int size;
  unsigned int *data;
#define UInt32Array1D_IPC_FORMAT "{uint,<uint:1>}"
  static const char *getIPCFormat(void) {
    return UInt32Array1D_IPC_FORMAT;
  }


  UInt32Array1D() : size(0), data(0) {}
#ifdef MEX_IPC_SERIALIZATION
  INSERT_SERIALIZATION_DECLARATIONS
#endif

};

struct UInt32Array2D {
  unsigned int sizex;
  unsigned int sizey;
  unsigned int *data;
#define UInt32Array2D_IPC_FORMAT "{uint,uint,<uint:1,2>}"
  static const char *getIPCFormat(void) {
    return UInt32Array2D_IPC_FORMAT;
  }


  UInt32Array2D() : sizex(0), sizey(0), data(0) {}

};

struct DoubleArray1D {
  unsigned int size;
  double *data;
#define DoubleArray1D_IPC_FORMAT "{uint,<double:1>}"
  static const char *getIPCFormat(void) {
    return DoubleArray1D_IPC_FORMAT;
  }


  DoubleArray1D() : size(0), data(0) {}

  int Resize(unsigned int newSize)
  {
    if (newSize > size)
    {
      if (size > 0)
        delete [] data;

      data = new double[newSize];
    }

    size = newSize;
    return 0;
  }

};

struct DoubleArray2D {
  unsigned int sizex;
  unsigned int sizey;
  double *data;
#define DoubleArray2D_IPC_FORMAT "{uint,uint,<double:1,2>}"
  static const char *getIPCFormat(void) {
    return DoubleArray2D_IPC_FORMAT;
  }


  DoubleArray2D() : sizex(0), sizey(0), data(0) {}

};

struct FloatArray1D {
  unsigned int size;
  float *data;
#define FloatArray1D_IPC_FORMAT "{uint,<float:1>}"
  static const char *getIPCFormat(void) {
    return FloatArray1D_IPC_FORMAT;
  }


  FloatArray1D() : size(0), data(0) {}
#ifdef MEX_IPC_SERIALIZATION
  INSERT_SERIALIZATION_DECLARATIONS
#endif

};

struct FloatArray2D {
  unsigned int sizex;
  unsigned int sizey;
  float *data;
#define FloatArray2D_IPC_FORMAT "{uint,uint,<float:1,2>}"
  static const char *getIPCFormat(void) {
    return FloatArray2D_IPC_FORMAT;
  }


  FloatArray2D() : sizex(0), sizey(0), data(0) {}
#ifdef MEX_IPC_SERIALIZATION
  INSERT_SERIALIZATION_DECLARATIONS
#endif

};

struct FloatArray3D {
  unsigned int sizex;
  unsigned int sizey;
  unsigned int sizez;
  float *data;
#define FloatArray3D_IPC_FORMAT "{uint,uint,uint,<float:1,2,3>}"
  static const char *getIPCFormat(void) {
    return FloatArray3D_IPC_FORMAT;
  }


  FloatArray3D() : sizex(0), sizey(0), sizez(0), data(0) {}
#ifdef MEX_IPC_SERIALIZATION
  INSERT_SERIALIZATION_DECLARATIONS
#endif

};

struct CharArray1D {
  unsigned int size;
  char *data;
#define CharArray1D_IPC_FORMAT "{uint,<char:1>}"
  static const char *getIPCFormat(void) {
    return CharArray1D_IPC_FORMAT;
  }


  CharArray1D() : size(0), data(0) {}

};

struct CharArray2D {
  unsigned int sizex;
  unsigned int sizey;
  char *data;
#define CharArray2D_IPC_FORMAT "{uint,uint,<char:1,2>}"
  static const char *getIPCFormat(void) {
    return CharArray2D_IPC_FORMAT;
  }


  CharArray2D() : sizex(0), sizey(0), data(0) {}
#ifdef MEX_IPC_SERIALIZATION
  INSERT_SERIALIZATION_DECLARATIONS
#endif

};
typedef CharArray2D Char2D;
#define Char2D_IPC_FORMAT "" CharArray2D_IPC_FORMAT ""
typedef FloatArray2D Float2D;
#define Float2D_IPC_FORMAT "" FloatArray2D_IPC_FORMAT ""
typedef Float2D SurfaceHeightData;
#define SurfaceHeightData_IPC_FORMAT "" Float2D_IPC_FORMAT ""
typedef FloatArray3D SurfaceColorData;
#define SurfaceColorData_IPC_FORMAT "" FloatArray3D_IPC_FORMAT ""
typedef Char2D SurfaceMaskData;
#define SurfaceMaskData_IPC_FORMAT "" Char2D_IPC_FORMAT ""
typedef FloatArray1D FloatArray;
#define FloatArray_IPC_FORMAT "" FloatArray1D_IPC_FORMAT ""
typedef UInt16Array1D UInt16Array;
#define UInt16Array_IPC_FORMAT "" UInt16Array1D_IPC_FORMAT ""

struct Lidar2DDataDouble {
  int counter;
  int id;
  DoubleArray1D ranges;
  DoubleArray1D angles;
  DoubleArray1D intensities;
  int direction;
  double timestamp;
#define Lidar2DDataDouble_IPC_FORMAT "{int,int," DoubleArray1D_IPC_FORMAT "," DoubleArray1D_IPC_FORMAT "," DoubleArray1D_IPC_FORMAT ",int,double}"
  static const char *getIPCFormat(void) {
    return Lidar2DDataDouble_IPC_FORMAT;
  }


  Lidar2DDataDouble() : counter(0), id(0), direction(1), timestamp(0) {}

};

struct Lidar2DDataFloat {
  int counter;
  int id;
  FloatArray1D ranges;
  FloatArray1D angles;
  FloatArray1D intensities;
  int direction;
  double timestamp;
#define Lidar2DDataFloat_IPC_FORMAT "{int,int," FloatArray1D_IPC_FORMAT "," FloatArray1D_IPC_FORMAT "," FloatArray1D_IPC_FORMAT ",int,double}"
  static const char *getIPCFormat(void) {
    return Lidar2DDataFloat_IPC_FORMAT;
  }


  Lidar2DDataFloat() : counter(0), id(0), direction(1), timestamp(0) {}

};

struct SurfaceProperties {
  double resx;
  double resy;
  unsigned int interpx;
  unsigned int interpy;
  unsigned int lineSepX;
  unsigned int lineSepY;
#define SurfaceProperties_IPC_FORMAT "{double,double,uint,uint,uint,uint}"
  static const char *getIPCFormat(void) {
    return SurfaceProperties_IPC_FORMAT;
  }


  SurfaceProperties() : resx(1.0), resy(1.0), interpx(0), interpy(0), lineSepX(1), lineSepY(1) {}
#ifdef MEX_IPC_SERIALIZATION
  INSERT_SERIALIZATION_DECLARATIONS
#endif

};

struct Surface2D {
  SurfaceHeightData heightData;
  SurfaceColorData colorData;
  SurfaceMaskData maskData;
  SurfaceProperties props;
#define Surface2D_IPC_FORMAT "{" SurfaceHeightData_IPC_FORMAT "," SurfaceColorData_IPC_FORMAT "," SurfaceMaskData_IPC_FORMAT "," SurfaceProperties_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return Surface2D_IPC_FORMAT;
  }


#ifdef MEX_IPC_SERIALIZATION
  INSERT_SERIALIZATION_DECLARATIONS
#endif

};

struct Surface2DUpdate {
  FloatArray1D heightData;
  UInt32Array1D xs;
  UInt32Array1D ys;
#define Surface2DUpdate_IPC_FORMAT "{" FloatArray1D_IPC_FORMAT "," UInt32Array1D_IPC_FORMAT "," UInt32Array1D_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return Surface2DUpdate_IPC_FORMAT;
  }


#ifdef MEX_IPC_SERIALIZATION
  INSERT_SERIALIZATION_DECLARATIONS
#endif

};

struct Line {
  Pos3D p1;
  Pos3D p2;
#define Line_IPC_FORMAT "{" Pos3D_IPC_FORMAT "," Pos3D_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return Line_IPC_FORMAT;
  }
};

struct LineColor {
  Pos3DColorDoubleRGBA p1;
  Pos3DColorDoubleRGBA p2;
#define LineColor_IPC_FORMAT "{" Pos3DColorDoubleRGBA_IPC_FORMAT "," Pos3DColorDoubleRGBA_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return LineColor_IPC_FORMAT;
  }
};

struct LineList {
  unsigned int numPoints;
  Line *points;
#define LineList_IPC_FORMAT "{uint,<" Line_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return LineList_IPC_FORMAT;
  }
};

struct LineListColor {
  unsigned int numPoints;
  LineColor *points;
#define LineListColor_IPC_FORMAT "{uint,<" LineColor_IPC_FORMAT ":1>}"
  static const char *getIPCFormat(void) {
    return LineListColor_IPC_FORMAT;
  }
};

struct RangeData {
  unsigned int numPoints;
  double *data;
#define RangeData_IPC_FORMAT "{uint,<double:1>}"
  static const char *getIPCFormat(void) {
    return RangeData_IPC_FORMAT;
  }
};

struct AngleData {
  unsigned int numPoints;
  double *data;
#define AngleData_IPC_FORMAT "{uint,<double:1>}"
  static const char *getIPCFormat(void) {
    return AngleData_IPC_FORMAT;
  }
};

struct IntensityData {
  unsigned int numPoints;
  double *data;
#define IntensityData_IPC_FORMAT "{uint,<double:1>}"
  static const char *getIPCFormat(void) {
    return IntensityData_IPC_FORMAT;
  }
};

struct LaserData {
  RangeData ranges;
  AngleData angles;
  IntensityData intensities;
  int direction;
  double timestamp;
#define LaserData_IPC_FORMAT "{" RangeData_IPC_FORMAT "," AngleData_IPC_FORMAT "," IntensityData_IPC_FORMAT ",int,double}"
  static const char *getIPCFormat(void) {
    return LaserData_IPC_FORMAT;
  }
};

struct ImageData {
  int width;
  int height;
  int pixelSize;
  char *data;
  int cntr;
  double timestamp;
  int pixelFormat;
  double pixelDim;
#define ImageData_IPC_FORMAT "{int,int,int,<char:1,2,3>,int,double,int,double}"
  static const char *getIPCFormat(void) {
    return ImageData_IPC_FORMAT;
  }


  ImageData() : width(0), height(0), pixelSize(0), data(0), cntr(0),timestamp(0),  pixelFormat(0), pixelDim(0){}

};

enum VIS_PIXEL_FORMAT {
  VIS_PIXEL_FORMAT_RGB,
  VIS_PIXEL_FORMAT_MATLAB_RGB
};
#define VIS_PIXEL_FORMAT_IPC_FORMAT "{enum VIS_PIXEL_FORMAT_RGB,VIS_PIXEL_FORMAT_MATLAB_RGB}"

enum IMAGE_CAPTURE_CONTROL_ACTION {
  IMAGE_CAPTURE_CONTROL_ACTION_START,
  IMAGE_CAPTURE_CONTROL_ACTION_STOP,
  IMAGE_CAPTURE_CONTROL_ACTION_DUMP_FRAMES
};
#define IMAGE_CAPTURE_CONTROL_ACTION_IPC_FORMAT "{enum IMAGE_CAPTURE_CONTROL_ACTION_START,IMAGE_CAPTURE_CONTROL_ACTION_STOP,IMAGE_CAPTURE_CONTROL_ACTION_DUMP_FRAMES}"

struct ImageCaptureControl {
  unsigned int action;
  unsigned int mode;
  unsigned int delay;
  unsigned int count;
#define ImageCaptureControl_IPC_FORMAT "{uint,uint,uint,uint}"
  static const char *getIPCFormat(void) {
    return ImageCaptureControl_IPC_FORMAT;
  }


  ImageCaptureControl() : action(0), delay(0), count(0) {}

};

struct PosArray3D {
  DoubleArray1D xs;
  DoubleArray1D ys;
  DoubleArray1D zs;
#define PosArray3D_IPC_FORMAT "{" DoubleArray1D_IPC_FORMAT "," DoubleArray1D_IPC_FORMAT "," DoubleArray1D_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return PosArray3D_IPC_FORMAT;
  }


#ifdef MEX_IPC_SERIALIZATION
  INSERT_SERIALIZATION_DECLARATIONS
#endif

};


} //namespace vis


#endif /* INCVisDataTypes_hh */
