SetMagicPaths

global GCS MAGIC_COLORMAP HAVE_ROBOTS ROBOTS RDISPLAY
HAVE_ROBOTS = 1;
GCS.ids = [8];
GCS.sensor_ids = [8];
RMAP{8}.x0 = -50;
RMAP{8}.y0 = -50;
RMAP{8}.dx = 100;
RMAP{8}.dy = 100;
RMAP{8}.cost = zeros(100,100);

initColormap; 

axlim = 10;

% Setup individual robot windows
for id = GCS.ids,
  figure(id+1);
  clf;
  set(gcf,'NumberTitle', 'off', 'Name',sprintf('Map: Robot %d',id));

  % Individual map

  RDISPLAY.hMap{id} = ...
      imagesc(RMAP{id}.x0+RMAP{id}.dx, RMAP{id}.y0+RMAP{id}.dy, ...
              RMAP{id}.cost, [-100 100]);

  % Robot pose
  GDISPLAY.servo{id} = 0;
  RDISPLAY.hRobot{id} = plotRobot(0, 0, 0, id, 0);

  % Robot path
  hold on;
  RDISPLAY.path{id} = plot(0, 0, '-r');
  RDISPLAY.explore{id} = plot(0, 0, '-c');
  hold off;

  axis xy equal;
  axis([-axlim axlim -axlim axlim]);
  RDISPLAY.hAxes{id} = gca;
  set(gca,'Position', [.2 .1 .8 .8], 'XLimMode', 'manual', 'YLimMode', 'manual');
  set(gca,'CLim',[-100 100]); 
  set(gca,'CLimMode','manual');
  colormap(MAGIC_COLORMAP); 

  hfig = gcf;
  RDISPLAY.hFigure{id} = hfig;
  Std.Interruptible = 'off';
  Std.BusyAction = 'queue';
  RDISPLAY.stopControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Stop', ...
   'Callback', ['sendStateEvent(',num2str(id),',''stop'')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .91 .15 .07]);
  RDISPLAY.forwardControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Forward', ...
   'Callback', ['sendStateEvent(',num2str(id),',''forward'')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .82 .15 .07]);
  RDISPLAY.backupControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Backup', ...
   'Callback', ['sendStateEvent(',num2str(id),',''backup'')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .73 .15 .07]);
  RDISPLAY.spinLeftControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'SpinLeft', ...
   'Callback', ['sendStateEvent(',num2str(id),',''spinLeft'')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .64 .15 .07]);
  RDISPLAY.spinRightControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'SpinRight', ...
   'Callback', ['sendStateEvent(',num2str(id),',''spinRight'')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .55 .15 .07]);
  RDISPLAY.pathControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Path', ...
   'Callback', ['ginputPath(',num2str(id),')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .46 .15 .07]);
  % Button to force follow mode without obstacle detection
  RDISPLAY.forceControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Force', ...
   'Callback', ['sendStateEvent(',num2str(id),',''follow'')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .37 .15 .07]);

  RDISPLAY.goToPointControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Go To Point', ...
   'Callback', ['ginputPoint(',num2str(id),')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .28 .15 .07]);
  RDISPLAY.exploreControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Explore', ...
   'Callback', ['sendStateEvent(',num2str(id),',''explore'')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .19 .15 .07]);
  RDISPLAY.lookControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Look', ...
   'Callback', ['ginputLook(',num2str(id),')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .10 .15 .07]);
  RDISPLAY.trackControl{id} = uicontrol(Std, ...
                                     'Parent', hfig, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Track', ...
   'Callback', ['ginputTrack(',num2str(id),')'], ...
                                     'Units', 'Normalized', ...
                                     'Position', [.025 .01 .15 .07]);

end



if HAVE_ROBOTS
  masterConnectRobots(GCS.ids,'localhost')
  fprintf('connected successfully\n')
end

messages = {'Planner_Path', ...
            'FSM_Status'};

handles  = {@gcsRecvPlannerPathFcn, ...
            @gcsRecvFsmStatusFcn};
          
queueLengths = [1 1];

%subscribe to messages
if HAVE_ROBOTS
  masterSubscribeRobots(messages, handles, queueLengths)
  for id = GCS.ids,
    msgNamePath = ['Robot',num2str(id),'/Path'];
    ROBOTS(id).ipcAPI('define', msgNamePath);

    msgNamePath = ['Robot',num2str(id),'/Goal_Point'];
    ROBOTS(id).ipcAPI('define', msgNamePath);

    msgNamePath = ['Robot',num2str(id),'/Explore_Path'];
    ROBOTS(id).ipcAPI('define', msgNamePath);

    msgNamePath = ['Robot',num2str(id),'/Avoid_Regions'];
    ROBOTS(id).ipcAPI('define', msgNamePath);

    msgNameStateEvent = ['Robot',num2str(id),'/StateEvent'];
    ROBOTS(id).ipcAPI('define', msgNameStateEvent);

    msgNameLook = ['Robot',num2str(id),'/Look_Msg'];
    ROBOTS(id).ipcAPI('define', msgNameLook);

    msgNameUseServo = ['Robot',num2str(id),'/Use_Servo'];
    ROBOTS(id).ipcAPI('define', msgNameUseServo);
  end
end